*lightspeed.txt*        For Neovim version 0.5        Last change: 2021 June 12

                    .-.. .. --. .... - ... .--. . . -.. 
                  __   _      __   __                      __
                 / /  (_)__ _/ /  / /____ ___  ___ ___ ___/ /
                / /__/ / _ `/ _ \/ __(_-</ _ \/ -_) -_) _  / 
               /____/_/\_, /_//_/\__/___/ .__/\__/\__/\_,_/  
                      /___/            /_/                   
                    .-.. .. --. .... - ... .--. . . -.. 
                                              
==============================================================================
CONTENTS                                                   *lightspeed-contents*

  Introduction ····································· |lightspeed-introduction|
  Usage ··················································· |lightspeed-usage|
  Configuration ·········································· |lightspeed-config|
  Default mappings ······························|lightspeed-default-mappings|
  Custom mappings ······························· |lightspeed-custom-mappings|
  Highlighting ········································ |lightspeed-highlight|

==============================================================================
INTRODUCTION                *lightspeed* *lightspeed.nvim* *lightspeed-introduction*

Lightspeed is a motion plugin for Neovim, that makes it possible to reach any
targets in the visible window area with great efficiency, by entering a
2-character search pattern, and then optionally choosing a "labeled" target
among the subsequent on-screen matches. Multiline versions of the native
f/F/t/T commands are also implemented, as a convenience.

==============================================================================
USAGE                                                         *lightspeed-usage*

                                                 *lightspeed-2-character-search*
Command sequence for 2-character search in Normal mode, with the default
settings:

`{s,S}<c-x>?{char1}{char2}?{<tab>,<s-tab>}*{label}?`

That is, 
- invoke in the forward (`s`) or backward (`S`) direction
- optionally turn on "full-inclusive" mode (moves the cursor to the end of the
  match)
- enter 1st character of the search pattern (might short-circuit after this,
  if the character is unique in the search direction)
- enter 2nd character of the search pattern (might short-circuit after this,
  if there is only one match)
- optionally cycle through the groups of targets that can be labeled at once
- choose a labeled target to jump to (in the current group)

                                              *lightspeed-jump-on-partial-input*
If you enter a character that is the only match in the search direction,
Lightspeed jumps to it directly, without waiting for a second input. To
mitigate accidents, a short timeout is set by default, until the second
character in the pair (and only that) is "swallowed" (see
`jump_on_partial_input_safety_timeout` in |lightspeed-config|).

                                                          *lightspeed-shortcuts*
There can be positions where the assigned label itself is enough to determine
the target you want to jump to (for example when a character is always
followed by a certain other character in the search area). Those you can reach
via typing the label character right after the first input, bypassing the
second one. The label gets a different highlight in these cases (by default,
appears as an "inverse" block of the normal labels).

                       *lightspeed-1-character-search* *lightspeed-instant-repeat*
`f`, `F`, `t`, `T` work as their native counterparts, but are not limited to
the current line. In Normal and Visual mode, the motion can be repeated via
pressing the same key (`f` for `f`, etc.) or one of the others (changing the
direction or the inclusiveness on the fly) - this "instant-repeat" mode is
active until you type any other character.

Note: `;` and `,` do not work - they can be remapped for more useful things.

                                                       *lightspeed-enter-repeat*
Pressing <enter> after invoking any of Lightspeed's commands searches with the
previous input (1- and 2-character searches are saved separately).

                                                         *lightspeed-dot-repeat*
You can repeat change and delete operations with the `.` character, if
repeat.vim (https://github.com/tpope/vim-repeat) is installed.

Special cases:
- dot-repeating a jump based on partial input will target the first match of
  the previous search pattern (as if it would have been typed out in its
  entirety)
- dot-repeating a jump via a shortcut-label behaves the same as if we have not
  used the shortcut
- dot-repeating a jump in which group-switching was involved is repeated as
  <enter>-repeat (the target chosen is not saved, will prompt for input again)


Note: <C-o> will ignore the jump if the cursor line has not changed. This is a
      Neovim issue (https://github.com/neovim/neovim/issues/9874), and has
      nothing to do with this plugin.

==============================================================================
CONFIGURATION                                                *lightspeed-config*

Setting an individual option via the `opts` table directly:

`   require'lightspeed'.opts['jump_to_first_match'] = false`

Setting multiple options via the `setup` function: >

    require'lightspeed'.setup { 
        jump_to_first_match = false,
        full_inclusive_prefix_key = '<tab>',
        limit_ft_matches = 10,
    }
<
    Note: These will be "merged" with the current/default settings. (Settings
          not mentioned here are not disturbed.)

Available options~

`jump_to_first_match = true`

    Jump to the first match automatically, without having to select a label.
    Basically chooses between Sneak-like or EasyMotion-like behaviour.

    Note: Operator-pending mode ignores this setting, all targets (if multiple
          found) are labeled then.

`jump_on_partial_input_safety_timeout = 400`

    Timeout value, in milliseconds, until the follow-up character is
    "swallowed", when jumping to a unique character right after the first
    input (see |lightspeed-jump-on-partial-input|).

`highlight_unique_chars = false`

    Highlight unique characters in the search direction, before entering the
    first input. This might cause a very noticeable (on slower machines
    untolerable) lag when the search area is big, so this is an opt-in
    feature.

`grey_out_search_area = true`

    If turned on, for 2-character search, all syntax highlighting is washed
    out to a uniform, neutral grey in the search direction, so that
    the various marks of Lightspeed are clearly visible. If you decide to turn
    this off, make sure to configure your custom |lightspeed-highlighting| to
    fit the colorscheme being used.

`match_only_the_start_of_same_char_seqs = true`

    This can be useful, so that e.g. a separator line will not snatch up all the
    available labels when you want to jump to a `==` or `--` beyond that.

`limit_ft_matches = 5`
    
    For 1-character search, only the next 'n' matches will be highlighted
    after [count]. This might be useful either for performance purposes or for
    reducing visual noise. (Highlighting matches can be turned off altogether
    by setting the value to 0, but that is not recommended, since this is also
    a visual signal about whether |lightspeed-instant-repeat| is active.)

`full_inclusive_prefix_key = '<c-x>'`

    Key to switch on "full-inclusive" mode for 2-character search. The cursor
    will jump to the end of the match instead of the start then. In
    operator-pending mode, the operated area is extended to the end of the
    match. For this, you will probably want to use some special -
    non-searchable - key (|keycodes| are supported).

    Note: Combined with |forced-motion|, you can land before or on the first
          character of the match, at the end of the match, or even in the
          column _after_ the end of the match.
    
If the following attributes are not specified by the user, Lightspeed will
decide their values at runtime, based on whether `jump_to_first_match` is
active. (In that case we should use only such keys that are unlikely to be
used right after a jump.)

`labels = nil`

    If `jump_to_first_match` is on: >
          {"s", "f", "n", "/", "u", "t", "q", "S", "F", "G",
           "H", "L", "M", "N", "?", "U", "R", "Z", "T", "Q"}
<
    Otherwise: >
          {"f", "j", "d", "k", "s", "l", "a", ";", "e", "i",
           "w", "o", "g", "h", "v", "n", "c", "m", "z", "."}
<
`cycle_group_fwd_key = nil`

    If `jump_to_first_match` is on: <tab>
    Otherwise: <space>

`cycle_group_bwd_key = nil`

    If `jump_to_first_match` is on: <s-tab>
    Otherwise: <s-space>

==============================================================================
DEFAULT MAPPINGS                                   *lightspeed-default-mappings*

Normal mode~

s{char}{char}              Jump to the first character of {char}{char}
                           in the forward direction.
S{char}{char}              Jump to the first character of {char}{char}
                           in the backward direction.

Visual mode~

z{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the forward
                           direciton.
Z{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the backward
                           direciton.

Operator-pending mode~

{operator}z{char}{char}    Perform {operator} from the cursor to the first
                           character of {char}{char} in the forward direction
                           (exclusive).
{operator}Z{char}{char}    Perform {operator} from the cursor to the first
                           character of {char}{char} in the backward direction
                           (inclusive).

All modes~

[count]f{char}             To the [count]'th next {char}.
[count]F{char}             To the [count]'th previous {char}.
[count]t{char}             To right before the [count]'th next {char}.
[count]T{char}             To right after the [count]'th previous {char}.

{key}<Enter>               Repeat with previous input. (1-character and
                           2-character searches are stored separately.)

<Esc>                      Exit Lightspeed at any stage cleanly.

2-character search~
                                                     *lightspeed-full-inclusive*
{key}<C-x>{pattern}        Move the cursor to the end of the match (in
                           operator-pending mode, the area is extended to the
                           end of the match, inclusive). Can be configured
                           with `full_inclusive_prefix_key`.

<Tab> (or <Space>)         Cycle to the next group of labeled matches.
<S-Tab> (or <S-Space>)     Cycle to the previous group of labeled matches.

                           When `jump_to_first_match` is set to `false`, and
                           no custom mappings are given, the second - 
                           presumably more comfortable - pair of mappings is
                           used. Can be configured with `cycle_group_fwd_key`
                           and `cycle_group_bwd_key`.

==============================================================================
CUSTOM MAPPINGS                                     *lightspeed-custom-mappings*

Available <Plug> keys for all modes:

`<Plug>Lightspeed_s`
`<Plug>Lightspeed_S`
`<Plug>Lightspeed_f`
`<Plug>Lightspeed_F`
`<Plug>Lightspeed_t`
`<Plug>Lightspeed_T`

Note: Be sure not to use the `-noremap` versions, as <Plug> mappings should be
      used recursively, by design.

For 2-character search, the keys for cycling between groups of matches, and
the prefix triggering full-inclusive mode can be set in the `opts` table, see
|lightspeed-config|.

                                           *lightspeed-disable-default-mappings*
Lightspeed does not remap any keys for which a custom mapping is already
specified. If you want to prevent the plugin to override some of the native
commands, for example f/t, map anything to the corresponding <Plug> keys,
before the plugin is loaded.

==============================================================================
HIGHLIGHTING                                              *lightspeed-highlight*

Lightspeed uses the following highlight groups that you can configure to your
own liking:

    LightspeedLabel~
        The character needed to be pressed to jump to the match position,
        after the whole search pattern has been given. It appears top of the
        second character of the pair, after the first input has been given.

    LightspeedLabelOverlapped~
        When matches overlap, labels get next to each other - in that case
        they get different highlights, to be more easily distinguishable.

    LightspeedLabelDistant~
    LightspeedLabelDistantOverlapped~
        If the number of matches exceeds the available target labels, the next
        group of labeled targets are shown with a different color. Those can
        be reached by pressing the `cycle_fwd_key` before the label character.
         
    LightspeedShortcut~
    LightspeedShortcutOverlapped~
        Labels for positions that can be jumped to right after the first
        input (see |lightspeed-shortcuts|).

    LightspeedMatchingChar~
        The second character of the match, that is shown on top of the first
        one, as a reminder.

    LightspeedGreyWash~
        Foreground color of the "washed out" area for 2-character search.

    LightspeedUnlabeledMatch~
        Matches that can be jumped to automatically, i.e. do not get a label
        - the only ones, and the first ones if `jump_to_first_match` is on.

    LightspeedOneCharMatch~
        Matching characters of f/t search.

    LightspeedUniqueChar~
        Unique characters in the search direction, shown if
        `highlight_unique_chars` is on. Uses the same settings as
        LightspeedUnlabeledMatch by default.

    LightspeedPendingOpArea~
    LightspeedPendingChangeOpArea~
        When jumping based on partial input in operator-pending mode, we do
        not see the operation executed right away, because of the "safety"
        timeout (see |lightspeed-jump-on-partial-input|) - therefore we set a
        temporary highlight on the operated area. ("Destructive" operations -
        change and delete - get a different highlight, with strikethrough, by
        default.)

In order to preserve your custom settings after changing the colorscheme, you
might want to wrap them in a function, and define an autocommand like below.
(Lightspeed does the same, but with |:hi-default|, so it will not overwrite
yours.) >

    vim.cmd("augroup LightspeedCustomHighlight")
    vim.cmd("autocmd!")
    vim.cmd("autocmd ColorScheme * lua my_lightspeed_highlight_settings()")
    vim.cmd("augroup end")

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
